---
import PostDetails from "@components/PostDetails.astro";
import PaginationLinks from "@components/PaginationLinks.astro";
import TableOfContents from "@components/TableOfContents.astro";
import MainLayout from "@layouts/MainLayout.astro";
import BlogPostLayout from "@layouts/BlogPostLayout.astro";
import { getCollection, render } from "astro:content";

export async function getStaticPaths() {
  const blogPosts = await getCollection("blog", ({ data }) => {
    const isLocal = data.remoteLink === undefined;
    const isLive = import.meta.env.DEV ? true : data.status === "Live";
    return isLocal && isLive;
  });
  return blogPosts.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content, headings, remarkPluginFrontmatter } = await render(entry);
const canonicalUrl = new URL(Astro.url.pathname, Astro.site);

const metadata = {
  description: entry.data.description,
  imagePath: entry.data.ogImage.src,
  title: entry.data.title,
  url: canonicalUrl.toString(),
};

const { title, publishedDate, tags } = entry.data;
const { minutesRead } = remarkPluginFrontmatter;

const postDetails = {
  title,
  date: publishedDate,
  tags,
  isPost: true,
  minutesRead,
};
---

<MainLayout metadata={metadata}>
  <section id="top">
    <a href="/blog" class="back-link">
      <span>Â«</span> Back to the full blog list</a
    >
    <PostDetails postDetails={postDetails} />
    <div class="body">
      {
        headings.length > 0 && (
          <aside class="toc">
            <TableOfContents headings={headings} />
          </aside>
        )
      }
      <BlogPostLayout>
        <Content />
      </BlogPostLayout>
    </div>
    <PaginationLinks main="#top" mainText="Back to top" />
  </section>
</MainLayout>

<style>
  section {
    scroll-margin-top: 4.375rem;
    display: grid;
    gap: 1rem;
    justify-content: center;
  }

  .back-link {
    font-weight: bold;

    & span {
      font-size: var(--b-lg);
    }
  }

  .body {
    scrollbar-gutter: stable;
    display: grid;
    width: 90cqw;

    @media (min-width: 1024px) {
      & {
        grid-template-columns: 1fr 0.5fr;
        grid-template-rows: 1fr;
        gap: 1rem;
      }
    }
  }

  .toc {
    margin-bottom: 2rem;
    scrollbar-gutter: stable;
    width: 100%;

    @media (min-width: 1024px) {
      & {
        grid-column: 2;
        grid-row: 1;
        margin-bottom: 0;
        border-left: 2px solid var(--bg-shadow);
      }
    }
  }
</style>
